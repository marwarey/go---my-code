var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
// Credits to Akram Khalid
import React, { useEffect, useRef, useCallback } from 'react';
import useWindowSize from './useWindowSize';
export var SmoothProvider = function (_a) {
    var ease = _a.ease, skew = _a.skew, children = _a.children, props = __rest(_a, ["ease", "skew", "children"]);
    // Hook to grab window size
    var size = useWindowSize();
    useRef();
    // Ref for parent div and scrolling div
    var app = useRef(null);
    var scrollContainer = useRef(null);
    // Configs
    var data = {
        ease: Math.max(0, Math.min(1, ease !== null && ease !== void 0 ? ease : 0.1)),
        current: 0,
        previous: 0,
        rounded: 0
    };
    // Scrolling
    var skewScrolling = useCallback(function () {
        var _a;
        // Set Current to the scroll position amount
        data.current = window.scrollY;
        // Set Previous to the scroll previous position
        data.previous += (data.current - data.previous) * data.ease;
        // Set rounded to
        data.rounded = Math.round(data.previous * 100) / 100;
        // Difference between
        var difference = data.current - data.rounded;
        var acceleration = difference / size.width;
        var velocity = +acceleration;
        var skewing = skew ? velocity * 7.5 : 0;
        // Assign skew and smooth scrolling to the scroll container
        if ((_a = scrollContainer.current) === null || _a === void 0 ? void 0 : _a.style) {
            var translate3d = "translate3d(0, -" + data.rounded + "px, 0)";
            var skewY = "skewY(" + skewing + "deg)";
            scrollContainer.current.style.transform = translate3d + ' ' + skewY;
        }
        // loop vai raf
        requestAnimationFrame(skewScrolling);
    }, [data, size.width]);
    // Run scrollrender once page is loaded.
    useEffect(function () {
        requestAnimationFrame(skewScrolling);
    }, [skewScrolling]);
    // Set the height of the body to the height of the scrolling div
    var setBodyHeight = function () {
        var _a;
        document.body.style.height =
            ((_a = scrollContainer.current) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect().height) + 'px';
    };
    // set the height of the body.
    useEffect(function () {
        setBodyHeight();
    }, [size.height]);
    return (React.createElement("div", __assign({ ref: app }, props),
        React.createElement("div", { ref: scrollContainer }, children)));
};
